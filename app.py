import time
import logging
import threading
import requests
from flask import Flask, request, jsonify, abort, render_template
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import json

# === Telegram Bot Config ===
TELEGRAM_BOT_TOKEN = "7818122772:AAEYZgEmdLxrNWpBHchD84vuhsbQ9JMnUgE"
ADMIN_CHAT_ID = "-1002504369770"

# === Logging ===
logging.basicConfig(filename="ddos.log", level=logging.INFO)

# === Global Variables ===
ip_requests = {}  
blocked_ips = set()
attack_logs = [] 

# === Security Config ===
REQUEST_LIMIT = 10 
TIME_WINDOW = 5 

app = Flask(__name__)

# === Function to send Telegram alerts ===
def send_telegram_alert(ip, reason):
    message = f"‚ö†Ô∏è DDoS Alert! IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º, –∫—É—Ä—Å–∏–≤–æ–º –∏ —Ç. –¥.
    }
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload), timeout=5)
        result = response.json()  # –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç

        print(f"üì® Telegram API Response: {result}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API

        if not result.get("ok"):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {result.get('description', 'Unknown error')}")
    
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Ç–∞–π–º-–∞—É—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ Telegram: {e}")

# === Get Client IP ===
def get_client_ip():
    if request.headers.get("X-Forwarded-For"):
        return request.headers.get("X-Forwarded-For").split(",")[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π IP
    return request.remote_addr or "unknown"

# === DDoS Detection Middleware ===
@app.before_request
def detect_ddos():
    ip = get_client_ip()
    now = time.time()
    timestamps = ip_requests.get(ip, [])
    timestamps.append(now)
    timestamps = [t for t in timestamps if t >= now - TIME_WINDOW]
    ip_requests[ip] = timestamps

    if ip in blocked_ips:
        abort(403)

    if len(timestamps) > REQUEST_LIMIT:
        blocked_ips.add(ip)
        attack_logs.append({"ip": ip, "time": time.ctime(now)})
        logging.info(f"[DDoS] IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        threading.Thread(target=send_telegram_alert, args=(ip, "Too many requests"), daemon=True).start()
        abort(403)

# === Routes ===
@app.route("/")
def index():
    return render_template("index.html", logs=attack_logs, blocked_ips=list(blocked_ips))

@app.route("/scan", methods=["GET"])
def scan():
    ip = get_client_ip()
    now = time.time()
    timestamps = ip_requests.get(ip, [])
    timestamps.append(now)
    ip_requests[ip] = [t for t in timestamps if t >= now - TIME_WINDOW]

    if ip in blocked_ips:
        return jsonify({"status": "blocked", "ip": ip})

    return jsonify({"status": "clean"})

@app.route("/get_ips", methods=["GET"])
def get_ips():
    return jsonify({
        "incoming": list(ip_requests.keys()),
        "blocked": list(blocked_ips),
        "fake_attacks": attack_logs
    })

# === Telegram Bot Handlers ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("DDoS Monitor Bot\n/blocked - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP\n/unblock <IP> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP")

async def blocked_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP:\n" + "\n".join(blocked_ips) if blocked_ips else "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP."
    await update.message.reply_text(msg)

async def unblock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <IP>")
        return
    ip = context.args[0]
    if ip in blocked_ips:
        blocked_ips.discard(ip)
        logging.info(f"[Bot] IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await update.message.reply_text(f"IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

# === –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–∞ ===
app_telegram = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
app_telegram.add_handler(CommandHandler("start", start_command))
app_telegram.add_handler(CommandHandler("blocked", blocked_command))
app_telegram.add_handler(CommandHandler("unblock", unblock_command))

# === –ó–∞–ø—É—Å–∫ Flask & Telegram Bot ===
if __name__ == "__main__":
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False),
        daemon=True
    ).start()
    app_telegram.run_polling()