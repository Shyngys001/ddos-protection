import os
import time
import logging
import random
import threading
import requests
from flask import Flask, request, jsonify, abort, render_template
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TELEGRAM_BOT_TOKEN = "7818122772:AAEYZgEmdLxrNWpBHchD84vuhsbQ9JMnUgE"
ADMIN_CHAT_ID = "1050963411"

logging.basicConfig(filename="ddos.log", level=logging.INFO)

ip_requests = {}  # –•—Ä–∞–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç IP-–∞–¥—Ä–µ—Å–æ–≤
blocked_ips = set()  # –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
attack_logs = []  # –õ–æ–≥ –∞—Ç–∞–∫

# üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
REQUEST_LIMIT = 5  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Ä–µ–º—è
TIME_WINDOW = 5  # –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–∫)  
AI_THRESHOLD = 0.2  # –ü–æ—Ä–æ–≥ –ò–ò-–¥–µ—Ç–µ–∫—Ü–∏–∏ (—Å–ª—É—á–∞–π–Ω—ã–π –±–ª–æ–∫)

# --- Flask ---
app = Flask(__name__)

# üî• –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_telegram_alert(ip, fake=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ IP"""
    attack_type = "–§–ï–ô–ö–û–í–ê–Ø DDoS-–∞—Ç–∞–∫–∞" if fake else "‚ö†Ô∏è DDoS-–∞—Ç–∞–∫–∞"
    message = f"{attack_type}! IP {ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": ADMIN_CHAT_ID, "text": message}
    
    try:
        requests.post(url, json=payload)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

# üî• –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP –∫–ª–∏–µ–Ω—Ç–∞
def get_client_ip():
    return request.headers.get("X-Forwarded-For", request.remote_addr) or "unknown"

@app.route("/fake_attack", methods=["POST"])
def fake_attack():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–µ–π–∫–æ–≤—É—é DDoS-–∞—Ç–∞–∫—É"""
    fake_ip = f"{random.randint(1, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}.{random.randint(0, 255)}"
    attack_logs.append({"ip": fake_ip, "time": time.ctime(), "fake": True})
    blocked_ips.add(fake_ip)
    send_telegram_alert(fake_ip, fake=True)
    return jsonify({"status": "fake_attack_created", "ip": fake_ip})

@app.route("/get_ips", methods=["GET"])
def get_ips():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ —Ñ–∞–ª—å—à–∏–≤—ã—Ö –∞—Ç–∞–∫"""
    return jsonify({
        "incoming": list(ip_requests.keys()),
        "blocked": list(blocked_ips),
        "fake_attacks": attack_logs
    })

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ª–æ–≥–∞–º–∏ –∞—Ç–∞–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    return render_template("index.html", logs=attack_logs, blocked_ips=list(blocked_ips))

# --- Telegram Bot ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DDoS.\n"
                                    "/blocked - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP\n"
                                    "/unblock <IP> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP")

async def blocked_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP:\n" + "\n".join(blocked_ips) if blocked_ips else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    await update.message.reply_text(msg)

async def unblock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <IP>")
        return
    ip = context.args[0]
    if ip in blocked_ips:
        blocked_ips.discard(ip)
        logging.info(f"[Bot] IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await update.message.reply_text(f"IP {ip} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

def create_telegram_application():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("blocked", blocked_command))
    application.add_handler(CommandHandler("unblock", unblock_command))
    return application

# --- –ó–∞–ø—É—Å–∫ ---
def run_flask():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    application = create_telegram_application()
    application.run_polling()
